#include <GL/glut.h> 
 
void myInit() { 
    glMatrixMode(GL_PROJECTION); 
    gluOrtho2D(0, 640, 0, 480); 
} 
 
void boundaryFill(int x, int y, float *fill_color, float *boundary_color) 
{ 
    float current[3]; 
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, current); 
 
    if ((current[0] != boundary_color[0] || current[1] != 
boundary_color[1] || current[2] != boundary_color[2]) && 
        (current[0] != fill_color[0] || current[1] != fill_color[1] || 
current[2] != fill_color[2])) { 
 
        glColor3f(fill_color[0], fill_color[1], fill_color[2]); 
        glBegin(GL_POINTS); 
            glVertex2i(x, y); 
        glEnd(); 
        glFlush(); 
 
        boundaryFill(x + 1, y, fill_color, boundary_color); 
        boundaryFill(x - 1, y, fill_color, boundary_color); 
        boundaryFill(x, y + 1, fill_color, boundary_color); 
        boundaryFill(x, y - 1, fill_color, boundary_color); 
    } 
} 
 
void polygonShape() { 
    glClear(GL_COLOR_BUFFER_BIT); 
 
    glColor3f(1, 0, 0); 
    glBegin(GL_LINE_LOOP); 
        glVertex2i(100, 100); 
        glVertex2i(100, 200); 
        glVertex2i(300, 100); 
    glEnd(); 
 
    glFlush(); 
 
    float boundary_color[3] = {1.0f, 0.0f, 0.0f}; 
    float fill_color[3] = {0.0f, 0.0f, 1.0f}; 
 
    boundaryFill(150, 150, fill_color, boundary_color); 
} 
 
int main(int argc, char **argv) { 
    glutInit(&argc, argv); 
    glutInitWindowSize(640, 480); 
    glutInitWindowPosition(100, 100); 
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); 
    glutCreateWindow("Boundary Fill Example"); 
 
    myInit(); 
    glutDisplayFunc(polygonShape); 
 
    glutMainLoop(); 
    return 0; 
}