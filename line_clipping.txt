#include <GL/freeglut.h>
#include <cmath>
#include <iostream>
using namespace std;

// Clipping window boundaries
float xmin = -100, ymin = -100, xmax = 100, ymax = 100;

// Structure for points
typedef struct points {
    float x, y;
    int CODE[4];
} PT;

PT p1, p2;

void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-300, 300, -300, 300, -1, 1);
    glMatrixMode(GL_MODELVIEW);
    glPointSize(2.5);
}

// Assign region codes to a point
void setCode(PT &point) {
    point.CODE[0] = (point.y > ymax) ? 1 : 0; // Top
    point.CODE[1] = (point.y < ymin) ? 1 : 0; // Bottom
    point.CODE[2] = (point.x > xmax) ? 1 : 0; // Right
    point.CODE[3] = (point.x < xmin) ? 1 : 0; // Left
}

// Function to check if the line is completely inside
bool isTriviallyAccepted(PT p1, PT p2) {
    for (int i = 0; i < 4; i++) {
        if (p1.CODE[i] != 0 || p2.CODE[i] != 0)
            return false;
    }
    return true;
}

// Function to check if the line is completely outside
bool isTriviallyRejected(PT p1, PT p2) {
    for (int i = 0; i < 4; i++) {
        if (p1.CODE[i] == 1 && p2.CODE[i] == 1)
            return true;
    }
    return false;
}

// Function to find intersection points
PT findIntersection(PT p, float slope, int edge) {
    PT intersection = p;
    switch (edge) {
        case 0: // Top
            intersection.y = ymax;
            intersection.x = p.x + (ymax - p.y) / slope;
            break;
        case 1: // Bottom
            intersection.y = ymin;
            intersection.x = p.x + (ymin - p.y) / slope;
            break;
        case 2: // Right
            intersection.x = xmax;
            intersection.y = p.y + slope * (xmax - p.x);
            break;
        case 3: // Left
            intersection.x = xmin;
            intersection.y = p.y + slope * (xmin - p.x);
            break;
    }
    return intersection;
}

// Cohen-Sutherland line clipping function
void cohenSutherlandLine(PT &p1, PT &p2) {
    setCode(p1);
    setCode(p2);

    if (isTriviallyAccepted(p1, p2)) {
        glColor3f(0.0, 1.0, 0.0); // Green for fully visible line
        glBegin(GL_LINES);
        glVertex2f(p1.x, p1.y);
        glVertex2f(p2.x, p2.y);
        glEnd();
    } else if (!isTriviallyRejected(p1, p2)) {
        float slope = (p2.y - p1.y) / (p2.x - p1.x);
        for (int i = 0; i < 4; i++) {
            if (p1.CODE[i] == 1)
                p1 = findIntersection(p1, slope, i);
            if (p2.CODE[i] == 1)
                p2 = findIntersection(p2, slope, i);
        }
        glColor3f(1.0, 0.0, 0.0); // Red for clipped line
        glBegin(GL_LINES);
        glVertex2f(p1.x, p1.y);
        glVertex2f(p2.x, p2.y);
        glEnd();
    }
}

// Display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    // Draw clipping rectangle
    glColor3f(0.0, 1.0, 0.0); // Green
    glBegin(GL_LINE_LOOP);
    glVertex2f(xmin, ymin);
    glVertex2f(xmin, ymax);
    glVertex2f(xmax, ymax);
    glVertex2f(xmax, ymin);
    glEnd();

    // Perform line clipping
    cohenSutherlandLine(p1, p2);

    glFlush();
}

int main(int argc, char** argv) {
    cout << "Enter coordinates for line (x1, y1): ";
    cin >> p1.x >> p1.y;
    cout << "Enter coordinates for line (x2, y2): ";
    cin >> p2.x >> p2.y;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(600, 600);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Cohen-Sutherland Line Clipping");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}